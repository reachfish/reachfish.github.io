<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-12T09:18:37.015Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>reachfish</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高性能优化</title>
    <link href="http://yoursite.com/2017/07/12/high_perf/"/>
    <id>http://yoursite.com/2017/07/12/high_perf/</id>
    <published>2017-07-12T09:18:37.025Z</published>
    <updated>2017-07-12T09:18:37.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Four-Pool-Performance"><a href="#Four-Pool-Performance" class="headerlink" title="Four Pool Performance"></a>Four Pool Performance</h2><ol>
<li>Data copies</li>
<li>Context switches</li>
<li>Memory allocation </li>
<li>Lock contention </li>
</ol>
<h2 id="Data-copies"><a href="#Data-copies" class="headerlink" title="Data copies"></a>Data copies</h2><hr>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li>High-Performance Request-Handling Programs <a href="http://pl.atyp.us/content/tech/servers.html" target="_blank" rel="external">1</a>。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Four-Pool-Performance&quot;&gt;&lt;a href=&quot;#Four-Pool-Performance&quot; class=&quot;headerlink&quot; title=&quot;Four Pool Performance&quot;&gt;&lt;/a&gt;Four Pool Performance&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++知识点学习</title>
    <link href="http://yoursite.com/2017/07/12/c_note/"/>
    <id>http://yoursite.com/2017/07/12/c_note/</id>
    <published>2017-07-12T09:15:12.988Z</published>
    <updated>2017-07-12T09:15:12.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p>内联函数需要在.h中定义，一旦内联函数发生修改，所有包含其头文件的文件都需要编译。<br>在类中定义的函数自动成为内敛函数。</p>
<h3 id="重载函数"><a href="#重载函数" class="headerlink" title="重载函数"></a>重载函数</h3><p>非指针、非引用的const形参和非const形参是等价的，所以const和非const的函数不是重载，会报错。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f1</span><span class="params">(<span class="keyword">const</span> A)</span></span></div><div class="line"><span class="keyword">int</span> <span class="title">f1</span><span class="params">(A)</span>      <span class="comment">//error,重定义</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> <span class="title">f2</span><span class="params">(<span class="keyword">const</span> A&amp;)</span></div><div class="line"><span class="keyword">int</span> <span class="title">f2</span><span class="params">(A&amp;)</span>     <span class="comment">//ok,是重载</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> <span class="title">f3</span><span class="params">(<span class="keyword">const</span> A*)</span></div><div class="line"><span class="keyword">int</span> <span class="title">f3</span><span class="params">(A* )</span>    <span class="comment">//ok, 是重载</span></div></pre></td></tr></table></figure></p>
<p>typedef, define 只是提供别名，类型本身不变，基于typedef的函数不能重载，会报错。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> A B;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(A)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(B)</span></span>; <span class="comment">//error, 重定义</span></div></pre></td></tr></table></figure></p>
<p>每一个版本的重载函数都应该在同一个作用域中声明。如果局部地声明一个函数，则该函数将屏蔽而不是重载在外层作用域中声明的同名函数。</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="mutable"><a href="#mutable" class="headerlink" title="mutable"></a>mutable</h3><p>mutable 声明的成员变量允许在const的成员函数中被修改。</p>
<h3 id="explicit"><a href="#explicit" class="headerlink" title="explicit"></a>explicit</h3><p>可以在类的构造函数声明前加上explicit，防止在调用其构造函数中对参数进行隐式类型转换。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">            A(<span class="built_in">string</span> &amp;);</div><div class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">isEq</span><span class="params">(<span class="keyword">const</span> A&amp;)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">A a;</div><div class="line"></div><div class="line"><span class="comment">//进行隐式转换，生成临时对象A("Hello")进行传参，如果将其构造函数加上explicit，就不能进行类型转换了，这时就会报错。</span></div><div class="line">a.isEq(<span class="string">"Hello"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>struct的成员默认是public的，class的成员默认是private的。</p>
<h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><p>包含以下条件的成员，必须在构造函数的初始化列表中进行初始化。</p>
<ol>
<li>没有默认构造函数的成员</li>
<li>const 成员</li>
<li>引用类型成员</li>
</ol>
<p>成员被初始化的次序是根据定义成员的次序。</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>如果一个类定义了至少一个构造函数，则编译器再也不会为其生成默认构造函数。<br>默认构造函数中，只会对具有类类型的成员通过运行各自的默认构造函数来进行初始化。内置和复合类型的成员，如指针和数组，只对定义在全局作用域中的对象才进行初始化。<br>类通常都应该定义一个默认构造函数。  </p>
<h3 id="…-显式初始化"><a href="#…-显式初始化" class="headerlink" title="{…} 显式初始化"></a>{…} 显式初始化</h3><p>对于没有定义构造函数，且所有成员都是public的类，可以用{}进行显式初始化。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">            <span class="built_in">string</span> name;</div><div class="line">            <span class="keyword">int</span> age;</div><div class="line">            <span class="built_in">string</span> sex;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">A a = &#123; <span class="string">"Jack"</span>, <span class="number">20</span>, <span class="string">"Male"</span> &#125;;</div></pre></td></tr></table></figure></p>
<h3 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h3><p>A(const A&amp;)<br>如果定义了复制构造函数，则必须也定义默认构造函数。  </p>
<p>在继承类的复制构造函数和赋值函数中，如果要调用父类的复制构造函数和赋值函数，需要显式调用。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>&#123;</span></div><div class="line">    ...</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span> <span class="keyword">public</span> Parent&#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        Child(<span class="keyword">const</span> Child&amp; rh) : Parent(rh) &#123; ... &#125;</div><div class="line"></div><div class="line">        Child&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Child&amp; rh) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;rh)&#123;</div><div class="line">                Parent::<span class="keyword">operator</span>=(rh);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>析构函数和构造函数不一样：</p>
<ol>
<li>析构函数只能有一种方式且是无参数的；</li>
<li>即使定义了用户的析构函数，默认析构函数依然会被调用，在默认析构函数中，会调用各成员各自的析构函数。</li>
<li>在需要释放资源时，析构函数最好定义成虚函数，这样在调用一个基类指针的析构函数时，知道应该调用哪个正确的函数。</li>
</ol>
<p>需要定义析构函数的地方，一般也需要定义拷贝构造函数和赋值函数，这称为三原则。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>构造函数和复制构造函数不能被继承。</p>
<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span>  <span class="comment">//友元类</span></div><div class="line"><span class="keyword">friend</span> <span class="keyword">int</span> B::foo(<span class="keyword">void</span>); <span class="comment">//友元成员函数</span></div><div class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">//友元普通函数</span></div></pre></td></tr></table></figure>
<h3 id="重载操作符"><a href="#重载操作符" class="headerlink" title="重载操作符"></a>重载操作符</h3><p>重载下标操作符[]时，一般需要重载两个版本：一个非const成员的返回和一个const成员的返回<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">            <span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> idx) <span class="keyword">const</span> &#123; <span class="keyword">return</span> data[idx]; &#125;</div><div class="line">            <span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> idx) &#123; <span class="keyword">return</span> data[idx]; &#125;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>重载自增/自减操作符<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">            <span class="comment">//前缀自增， ++A</span></div><div class="line">            A&amp; <span class="keyword">operator</span>++()</div><div class="line">            &#123;</div><div class="line">                cur++;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//后缀自增，A++</span></div><div class="line">            <span class="comment">//这里增加参数int，是为了和前缀自增进行区别</span></div><div class="line">            A <span class="keyword">operator</span>++(<span class="keyword">int</span>)</div><div class="line">            &#123;</div><div class="line">                A ret = *<span class="keyword">this</span>;</div><div class="line">                ++*<span class="keyword">this</span>;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> ret;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>:</div><div class="line">            <span class="keyword">int</span> cur;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><ul>
<li>sizeof是一个运算符，而不是函数<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">c</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> a;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> b;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">sizeof</span>(struct c); <span class="comment">//4, 静态变量存放在全局数据区，sizeof只计算栈中分配的大小。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>sizeof(空类) = 1, sizeof(空类+虚指针) = 4</p>
<ul>
<li>三目条件运算符编译器生成的代码会优于if…else…</li>
<li>函数参数的计算顺序是从右往左</li>
<li>switch中判断的表达式只能为整型或字符型</li>
<li><p>数组中地址</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//a, &amp;a[0] 首元素地址；&amp;a 数组首地址</span></div><div class="line"></div><div class="line">a == &amp;a[<span class="number">0</span>]; <span class="comment">//true</span></div><div class="line">a != &amp;a; <span class="comment">//err, a和&amp;a是两个不同类型，不能比较的</span></div></pre></td></tr></table></figure>
</li>
<li><p>三数取中间数</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">min(max(a,b), max(b,c), max(c,a))</div></pre></td></tr></table></figure>
</li>
<li><p>构造和析构函数执行顺序<br>构造函数：基类 -&gt; 成员 -&gt; 派生类<br>析构函数：派生类 -&gt; 成员 -&gt; 基类</p>
</li>
</ul>
<p>注意，即使类定义了自己的析构函数，依然会执行成员和基类的析构函数。</p>
<ul>
<li>临时变量可以作参数的定义为 const A&amp; 或 A<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></div><div class="line">&#125;; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(A a)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(A&amp; a)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">(<span class="keyword">const</span> A&amp; a)</span></span>;</div><div class="line"></div><div class="line">f1(A()); <span class="comment">//ok</span></div><div class="line">f2(A()); <span class="comment">//err</span></div><div class="line">f3(A()); <span class="comment">//ok</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;内联函数&quot;&gt;&lt;a href=&quot;#内联函数&quot; class=&quot;headerlink&quot; title=&quot;内联函数&quot;&gt;&lt;/a&gt;内联函数&lt;/h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络编程学习</title>
    <link href="http://yoursite.com/2017/07/12/tcp_udp/"/>
    <id>http://yoursite.com/2017/07/12/tcp_udp/</id>
    <published>2017-07-12T01:44:07.365Z</published>
    <updated>2017-07-12T01:44:07.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p>进程的每个操作都正好产生一个UDP数据报，并组装成一份待发送的IP数据报。<br>这与面向字符流的协议不同，如TCP，应用程序产生的全体数据与真正发送的单个IP数据报可能没有什么联系。<br>UDP不保证数据报能到达目的地。</p>
<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p>TCP提供的是一种面向连接的、可靠的字节流服务。<br>应用数据被分割成TCP认为最适合发送的的数据块。这和UDP完全不同，应用程序产生的数据报长度将保持不变。</p>
<p>一个端口地址和一个端口称为一个插口socket。插口对socketpair(包含客户端IP和端口，服务端IP和端口)唯一确定一个TCP连接的双方。</p>
<p>TCP为应用层提供全双工服务。这意味数据能在两个方向上独立地进行传输。因此，连接的每一端必须保持每个方向上的传输数据序号。<br>TCP将用户数据打包构成报文段；它发送数据后启动一个定时器；另一端对收到的数据进行确认，对失序的数据重新排序，丢弃重复数据；TCP提供端到端的流量控制，并计算和验证一个强制性的端到端检验和。</p>
<h2 id="Nagle算法"><a href="#Nagle算法" class="headerlink" title="Nagle算法"></a>Nagle算法</h2><p>基本定义：<strong>任意时刻，最多只能有一个未被确认的小块</strong>。<br>目的是尽可能发送大数据块，避免网络中充斥着许多小数据块。小段，是指小于MSS的数据块。<br>Nagle算法的规则，满足以下条件，则允许发送：</p>
<ol>
<li>包长度达到MSS</li>
<li>该包包含有FIN</li>
<li>设置TCP_NODELAY</li>
<li>未设置TCP_CORK，但所有小数据包(长度小于MSS)均被确认；</li>
<li>发生超时(一般为200ms)</li>
</ol>
<p>可以通过设置TCP_NODELAY来禁止Nagle算法。注意此时虽然禁止Nagle算法，但网络的传输依然受到TCP确认延迟机制的影响。</p>
<p>Nagle算法和Cork算法的区别。<br>Nagle着眼于避免网络因小包而拥塞，而Cork着眼于提高网络的利用率。两者在避免发送小包的效果上是一致的。但是Nagle算法在小包都被确认之后会继续发小包，而Cork算法则会继续累积小包。</p>
<h2 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h2><p>该协议允许发送方在停止等待确认前可以连续发送多少个分组。由于发送方不必每发一个分组就停下来等待确认，因此该协议可以加速数据的发送。</p>
<p>+++发送并被确认+++  [ +++发送未被确认+++   +++可被发送+++ ]    +++不可以被发送+++<br>窗口左边沿向右移动，称为窗口合拢，发生在发送或确认数据时；<br>窗口右边沿向右移动，称为窗口张开，接收端读取确认数据并释放TCP缓存；<br>窗口右边沿向左移动，称为窗口收缩。</p>
<p>如果左边沿到达右边沿，则称其为一个零窗口，此时发送方不能发送任何数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UDP&quot;&gt;&lt;a href=&quot;#UDP&quot; class=&quot;headerlink&quot; title=&quot;UDP&quot;&gt;&lt;/a&gt;UDP&lt;/h1&gt;&lt;p&gt;进程的每个操作都正好产生一个UDP数据报，并组装成一份待发送的IP数据报。&lt;br&gt;这与面向字符流的协议不同，如TCP，应用程序产生的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>scala基本学习</title>
    <link href="http://yoursite.com/2017/06/28/scala_base/"/>
    <id>http://yoursite.com/2017/06/28/scala_base/</id>
    <published>2017-06-28T06:08:33.211Z</published>
    <updated>2017-06-28T06:08:33.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h1><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>类名第一个字母要大写，方法名第一个字母要小写。</p>
<h3 id="定义包"><a href="#定义包" class="headerlink" title="定义包"></a>定义包</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//法一</span></div><div class="line"><span class="keyword">package</span> com.reach</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></div><div class="line"></div><div class="line"><span class="comment">//法二</span></div><div class="line"><span class="keyword">package</span> com.reach &#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.awt.<span class="type">Color</span> <span class="comment">//引入Color</span></div><div class="line"><span class="keyword">import</span> java.awt._   <span class="comment">//引入所有成员</span></div><div class="line"><span class="keyword">import</span> java.awt.&#123;<span class="type">Color</span>, <span class="type">Font</span>&#125; <span class="comment">//引入Color, Font</span></div><div class="line"><span class="keyword">import</span> java.util.&#123;<span class="type">HashMap</span> =&gt; <span class="type">JavaHashMap</span>&#125;  <span class="comment">//引入并重命名为JavaHashMap</span></div><div class="line"><span class="keyword">import</span> java.util.&#123;<span class="type">HashMap</span> =&gt; _, _&#125; <span class="comment">//引入util中的所有成员，但是HashMap被隐藏了</span></div></pre></td></tr></table></figure>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Unit: 同void， 用作不返还任何结果的方法的结果类型；<br>Null: null或空引用(null是对象，Null是类型)<br>Nothing: 任何其他类型的子类型<br>Any: 所有其他类的超类<br>AnyRef: 所有引用类的基类</p>
<p>scala没有Java中的原生类型，任何值都是一个对象，方法也是对象。</p>
<h3 id="符号字面量"><a href="#符号字面量" class="headerlink" title="符号字面量"></a>符号字面量</h3><p>‘&lt;标识符&gt;，如’x是scala.Symbol(“x”)的简写。</p>
<h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><p>“””…”””</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>var声明变量， val声明常量，声明格式：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明类型</span></div><div class="line"><span class="keyword">var</span> <span class="type">VariableName</span> : <span class="type">DataType</span> [=  <span class="type">InitialValue</span>]</div><div class="line"></div><div class="line"><span class="comment">//不声明类型，但需要指定初值，会自动推断类型的</span></div><div class="line"><span class="keyword">var</span> <span class="type">VariableName</span> = <span class="type">InitialValue</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> xmax, ymax = <span class="number">100</span>  <span class="comment">// xmax, ymax都声明为100</span></div><div class="line"><span class="keyword">val</span> (myVar1: <span class="type">Int</span>, myVar2: <span class="type">String</span>) = <span class="type">Pair</span>(<span class="number">40</span>, <span class="string">"Foo"</span>)</div><div class="line"><span class="keyword">val</span> (myVar1, myVar2) = <span class="type">Pair</span>(<span class="number">40</span>, <span class="string">"Foo"</span>)</div></pre></td></tr></table></figure></p>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ( i &lt;- <span class="number">1</span> to <span class="number">10</span>)</div><div class="line"><span class="keyword">for</span> (arg &lt;- args)</div></pre></td></tr></table></figure>
<h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>Scala 中的 private 限定符，比 Java 更严格，在嵌套类情况下，外层类不能访问被嵌套类的私有成员。但是内层类可以访问外层类的私有成员。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>()&#123;println(<span class="string">"f"</span>)&#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerMost</span></span>&#123;</div><div class="line">        f() <span class="comment">// 正确</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    (<span class="keyword">new</span> <span class="type">Inner</span>).f() <span class="comment">//错误</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 scala 中，对保护（Protected）成员的访问比 java 更严格一些。因为它只允许保护成员在定义了该成员的的类的子类中被访问。而在java中，用protected关键字修饰的成员，除了定义了该成员的类的子类可以访问，同一个包里的其他类也可以进行访问。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> p&#123;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>() &#123;println(<span class="string">"f"</span>)&#125;</div><div class="line">    &#125;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span></span>&#123;</div><div class="line">	    f()</div><div class="line">	&#125;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Other</span></span>&#123;</div><div class="line">		(<span class="keyword">new</span> <span class="type">Super</span>).f() <span class="comment">//错误</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数可以内嵌。</p>
<p>传值调用（call-by-value）：先计算参数表达式的值，再应用到函数内部<br>传名调用（call-by-name）：将未计算的参数表达式直接应用到函数内部， 函数参数加上 =&gt;<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span></span>(t:<span class="type">Long</span>)  <span class="comment">//传值调用</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span></span>(t: =&gt; <span class="type">Long</span>) <span class="comment">//传名调用</span></div></pre></td></tr></table></figure></p>
<p>调用时可以指定参数名，从而可以不按顺序输入参数<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span></span>(a:<span class="type">Int</span>, b:<span class="type">Int</span>) = &#123;&#125;</div><div class="line"></div><div class="line">fun(b=<span class="number">10</span>, a=<span class="number">20</span>) <span class="comment">//指定参数名</span></div></pre></td></tr></table></figure></p>
<p>通过*来指明可变参数<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span></span>(args: <span class="type">String</span>*) <span class="comment">//args为多个String</span></div></pre></td></tr></table></figure></p>
<p>匿名函数<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inc = (x:<span class="type">Int</span>) =&gt; x + <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>偏应用函数<br>偏应用函数是一种表达式，你不需要提供函数需要的所有参数，只需要提供部分，或不提供所需参数。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span></span>(date : <span class="type">Date</span>, msg : <span class="type">String</span>) </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myLog</span></span>() = &#123;</div><div class="line">    <span class="keyword">val</span> date = <span class="type">New</span> <span class="type">Date</span></div><div class="line">    <span class="keyword">var</span> logWithDate = log(date, _ : <span class="type">String</span>)</div><div class="line">    logWithDate(<span class="string">"HelloWorld"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数柯里化<br>柯里化(Currying)指的是将原来接受两个参数的函数变成新的接受一个参数的函数的过程。新的函数返回一个以原有第二个参数为参数的函数。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addOld</span></span>(x:<span class="type">Int</span>,y:<span class="type">Int</span>)=x+y <span class="comment">//调用 addOld(x, y)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(x:<span class="type">Int</span>)(y:<span class="type">Int</span>) = x + y <span class="comment">//调用 add(x)(y)</span></div><div class="line"></div><div class="line"><span class="comment">//相当于演化成  def add(x:Int) = (y:Int) = x + y</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> add_1 = add(<span class="number">1</span>)</div><div class="line"><span class="keyword">var</span> result = add_1(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">//下面的都是等价的</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(arg1,arg2,...,argn) = <span class="type">E</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(arg1)(arg2)...(argn) = <span class="type">E</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(arg1)(arg2)...(argn<span class="number">-1</span>) = &#123; <span class="function"><span class="keyword">def</span> <span class="title">g</span></span>(argn) = <span class="type">E</span>; g &#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(arg1)(arg2)...(argn<span class="number">-1</span>) = argn =&gt; <span class="type">E</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span> </span>= arg1 =&gt; arg2 =&gt; ... =&gt; argn =&gt; <span class="type">E</span></div><div class="line"><span class="keyword">val</span> f = arg1 =&gt; arg2 =&gt; ... =&gt; argn =&gt; <span class="type">E</span></div></pre></td></tr></table></figure>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包通常来讲可以简单的认为是可以访问一个函数里面局部变量的另外一个函数。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//multiplier访问了函数外的变量factor</span></div><div class="line"><span class="keyword">var</span> factor = <span class="number">3</span>  </div><div class="line"><span class="keyword">val</span> multiplier = (i:<span class="type">Int</span>) =&gt; i * factor</div></pre></td></tr></table></figure></p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>一维数组用Array，多维数组用ofDim。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一维数组</span></div><div class="line"><span class="keyword">var</span> a = <span class="type">Array</span>[<span class="type">String</span>](<span class="number">3</span>)</div><div class="line"><span class="comment">//多维数组</span></div><div class="line"><span class="keyword">var</span> b = ofDim[<span class="type">Int</span>](<span class="number">3</span>,<span class="number">3</span>)</div></pre></td></tr></table></figure>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>表List。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> empty : <span class="type">List</span>[<span class="type">Nothing</span>] = <span class="type">List</span>() <span class="comment">//空表</span></div><div class="line"></div><div class="line"><span class="comment">//可以用::和Nil来构造列表，Nil表示空列表</span></div><div class="line"><span class="keyword">var</span> ls = <span class="number">1</span>::(<span class="number">2</span>::(<span class="number">3</span>::<span class="type">Nil</span>))</div><div class="line"></div><div class="line"><span class="comment">//+: 在列表头添加单个元素, :+ 在列表尾添加元素，这两个操作本身不会改变操作的列表 </span></div><div class="line"><span class="number">2</span> +: ls</div><div class="line">ls :+ <span class="number">3</span></div><div class="line"></div><div class="line"><span class="comment">//head表示第一个元素，tail表示除第一个元素外的剩余元素</span></div><div class="line">ls.head </div><div class="line">ls.tail</div><div class="line"></div><div class="line"><span class="comment">//可以使用::: 或 List:::(ls2) 或 List.concat(...) 来链接多个链表</span></div><div class="line"><span class="keyword">var</span> ls1 = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"><span class="keyword">var</span> ls2 = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">ls1:::ls2</div><div class="line">ls1.:::(ls2)</div><div class="line"><span class="type">List</span>.concat(ls1, ls2)</div></pre></td></tr></table></figure></p>
<p>元组可以通过t._k来访问第k个元素。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> t = (<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)</div><div class="line"><span class="keyword">var</span> s = t._1 + t._2 + t._3</div></pre></td></tr></table></figure></p>
<p>Option<br>Option[T] 是一个类型为 T 的可选值的容器： 如果值存在， Option[T] 就是一个 Some[T] ，如果不存在， Option[T] 就是对象 None 。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> myMap: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>] = <span class="type">Map</span>(<span class="string">"key1"</span> -&gt; <span class="string">"value"</span>)</div><div class="line"><span class="keyword">val</span> value1: <span class="type">Option</span>[<span class="type">String</span>] = myMap.get(<span class="string">"key1"</span>)</div><div class="line"><span class="keyword">val</span> value2: <span class="type">Option</span>[<span class="type">String</span>] = myMap.get(<span class="string">"key2"</span>)</div></pre></td></tr></table></figure></p>
<p>可以使用 getOrElse() 方法来获取元组中存在的元素或者使用其默认的值，类似lua中的or<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> a:<span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">None</span> </div><div class="line"><span class="keyword">var</span> b = a.getOrElse(<span class="number">10</span>)  <span class="comment">//10</span></div></pre></td></tr></table></figure></p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>用于访问集合中的元素<br>基本操作有next和hasNext</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>重写非抽象方法时要加关键字override</p>
<h3 id="单例对象"><a href="#单例对象" class="headerlink" title="单例对象"></a>单例对象</h3><p>在 Scala 中，是没有 static 这个东西的，但是它也为我们提供了单例模式的实现方法，那就是使用关键字 object。<br>Scala 中使用单例模式时，除了定义的类之外，还要定义一个同名的 object 对象，它和类的区别是，object对象不能带参数。<br>必须在同一个源文件里定义类和它的伴生对象。<br>类和它的伴生对象可以互相访问其私有成员。</p>
<h3 id="Trait-特征"><a href="#Trait-特征" class="headerlink" title="Trait 特征"></a>Trait 特征</h3><p>类似于Java中的接口。<br>调用超类的构造器；<br>特征构造器在超类构造器之后、类构造器之前执行；<br>特质由左到右被构造；<br>每个特征当中，父特质先被构造；<br>如果多个特征共有一个父特质，父特质不会被重复构造<br>所有特征被构造完毕，子类被构造。</p>
<h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">matchTest</span></span>(x: <span class="type">Any</span>): <span class="type">Any</span> = x <span class="keyword">match</span> &#123;</div><div class="line">   <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">"one"</span></div><div class="line">   <span class="keyword">case</span> <span class="string">"two"</span> =&gt; <span class="number">2</span></div><div class="line">   <span class="keyword">case</span> y: <span class="type">Int</span> =&gt; <span class="string">"scala.Int"</span></div><div class="line">   <span class="keyword">case</span> _ =&gt; <span class="string">"many"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><p>尾递归在函数后面可以直接跳到函数的开头，并且改写函数的参数，从而不需要额外的空间。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//是尾递归</span></div><div class="line"><span class="comment">//gcd(32,24) = gcd(24, 8) = gcd(8, 0) = 8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a:<span class="type">Int</span>, b:<span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span>(b==<span class="number">0</span>) a </div><div class="line">        <span class="keyword">else</span> gcd(b, a%b)    </div><div class="line"></div><div class="line"><span class="comment">//不是尾递归</span></div><div class="line"><span class="comment">//factor(5) = 5 * factor(4) = 5 * (4 * factor(3)) = 5 * (4 * (3 * factor(2))) = ... = 5*(4*(3*(2*(1*1)))) = 120</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factor</span></span>(a: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (n==<span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> n * factor(n<span class="number">-1</span>)</div><div class="line"></div><div class="line"><span class="comment">//改成尾递归</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factor</span></span>(n: <span class="type">Int</span>):<span class="type">Int</span> = &#123;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Iter</span></span>(x:<span class="type">Int</span>, result:<span class="type">Int</span>):<span class="type">Int</span> = <span class="keyword">if</span>(x==<span class="number">0</span>) result <span class="keyword">else</span> <span class="type">Iter</span>(x<span class="number">-1</span>, result*x)</div><div class="line">    <span class="type">Iter</span>(n, <span class="number">1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><p>赋值语句<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> y = <span class="number">0</span></div><div class="line"><span class="keyword">val</span> x = y = <span class="number">10</span>  <span class="comment">//y=10, x = Unit, 说明 y=10 是一个赋值语句，赋值语句类型是Unit</span></div></pre></td></tr></table></figure></p>
<p>while<br>while是scala内置的，但是可以用函数来实现while。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">while</span></span>(p: =&gt; <span class="type">Boolean</span>)(s: =&gt; <span class="type">Unit</span>) = &#123;</div><div class="line">    <span class="keyword">if</span>(p) &#123;</div><div class="line">        s </div><div class="line">        <span class="keyword">while</span>(p)(s)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>def x = e<br>在定义时不会计算表达式e的值，而是在每次使用x的值时，都会计算e值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;零碎知识&quot;&gt;&lt;a href=&quot;#零碎知识&quot; class=&quot;headerlink&quot; title=&quot;零碎知识&quot;&gt;&lt;/a&gt;零碎知识&lt;/h1&gt;&lt;h3 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; class=&quot;headerlink&quot; title=&quot;命名&quot;&gt;&lt;/a&gt;命名&lt;/h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python小知识</title>
    <link href="http://yoursite.com/2017/06/22/python_tips/"/>
    <id>http://yoursite.com/2017/06/22/python_tips/</id>
    <published>2017-06-22T04:55:46.228Z</published>
    <updated>2017-06-22T04:45:26.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h1><h2 id="构造和析构函数"><a href="#构造和析构函数" class="headerlink" title="构造和析构函数"></a>构造和析构函数</h2><p>__new__是构造函数，在__init__函数之前调用，只使用参数cls，其余参数传给__init__。</p>
<p>__del__是析构函数，并不是语句del x的实现。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileObject</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filepath)</span>:</span></div><div class="line">        self.file = open(filepath, <span class="string">'r'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        self.file.close()</div><div class="line">        <span class="keyword">del</span> self.file</div></pre></td></tr></table></figure>
<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>__getattr__ 当用户试图访问不存在的属性时，会被调用。<br>__setattr__ 当用户试图设置属性时，不管改属性是否存在，会被调用。<br>__delattr__ 当用户试图删除属性时，不管改属性是否存在，会被调用。</p>
<h2 id="自定义序列"><a href="#自定义序列" class="headerlink" title="自定义序列"></a>自定义序列</h2><ol>
<li>不可变容器<br>需要实现 __len__ 和__getitem__ 方法。</li>
<li>可变容器<br>除了1，还要实现 __setitem__ 和 __delitem__ 方法。</li>
</ol>
<p>为了使容器支持迭代，还需要实现__iter__接口。</p>
<h2 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h2><p>with .. as xx: 做清理时使用，<br>需要定义 __enter__(self) 和 __exit__(self, exception_type, exception_value, traceback)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;魔法方法&quot;&gt;&lt;a href=&quot;#魔法方法&quot; class=&quot;headerlink&quot; title=&quot;魔法方法&quot;&gt;&lt;/a&gt;魔法方法&lt;/h1&gt;&lt;h2 id=&quot;构造和析构函数&quot;&gt;&lt;a href=&quot;#构造和析构函数&quot; class=&quot;headerlink&quot; title=&quot;构造和
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 类、属性和方法</title>
    <link href="http://yoursite.com/2017/06/22/python_type_object/"/>
    <id>http://yoursite.com/2017/06/22/python_type_object/</id>
    <published>2017-06-22T04:55:46.228Z</published>
    <updated>2017-06-22T04:45:26.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>调用基类的方法时，需要加上基类的类名，并且带上self参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span> </div><div class="line">        <span class="keyword">print</span> <span class="string">'Parent'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Parent)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span> </div><div class="line">        <span class="keyword">print</span> <span class="string">'Child'</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parent_foo</span><span class="params">(self)</span>:</span> </div><div class="line">        Parent.foo(self)</div></pre></td></tr></table></figure></p>
<h3 id="Super"><a href="#Super" class="headerlink" title="Super"></a>Super</h3><p>Super是一个类，Super(cls, obj)是根据类和其对象返回一个对象，可以通过Super来调用父类属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(Parent)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">        Super(Child, self).foo()</div><div class="line">        <span class="comment">#do other things</span></div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<h3 id="新类旧类"><a href="#新类旧类" class="headerlink" title="新类旧类"></a>新类旧类</h3><p>从object继承的是新类，否则为旧类。python 3中所有类都为新类，隐式继承自object。  </p>
<table>
<thead>
<tr>
<th></th>
<th>type(类)</th>
<th>type(实例)</th>
</tr>
</thead>
<tbody>
<tr>
<td>旧类</td>
<td>type ‘classobj’</td>
<td>type ‘instance’</td>
</tr>
<tr>
<td>新类</td>
<td>type ‘type’</td>
<td>class ‘ClassName’</td>
</tr>
</tbody>
</table>
<p>新类本身也是一个对象。</p>
<h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><p><strong>__private_attrs</strong> 以双下划线开头的属性为private属性。<br><strong>_protected_attrs</strong> 以单下划线开头的属性为protected属性。</p>
<p>外部访问私有属性时会报错，但是可以通过类名 _ClassName__var 来进行访问。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.__name =  name</div><div class="line"></div><div class="line">c = CC(<span class="string">"dog"</span>)</div><div class="line"><span class="comment"># err</span></div><div class="line"><span class="comment"># print c.__name</span></div><div class="line"></div><div class="line"><span class="comment"># ok </span></div><div class="line"><span class="keyword">print</span> c._CC__name</div></pre></td></tr></table></figure></p>
<h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><p>元类是用于创建类的类，一般类的元类是type。   </p>
<p>作用：</p>
<ol>
<li>拦截类的创建；</li>
<li>修改类；</li>
<li>返回修改后的类。 </li>
</ol>
<p>在python中，__metaclass__属性用于指明该类创建时使用的元类。 如果没有该属性,则使用type来创建。<br>搜索元类的顺序: 当前类 =&gt; 祖先类 =&gt; 模块 =&gt; type。</p>
<p>可以用type创建类。</p>
<p>概念上是<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#概念上是</span></div><div class="line">MyClass = MetaClass()</div><div class="line">MyObject = MyClass()</div><div class="line"></div><div class="line">type(ClassName, ParentList, AttrDict)</div></pre></td></tr></table></figure></p>
<h3 id="class"><a href="#class" class="headerlink" title="__class__"></a>__class__</h3><p>python中所有东西都是对象，并且也都是从类中生成的。例如整数对象是由类int生成的，字符串对象是由str生成的，而类是由元类生成的。<br>对象的 __class__ 属性表示生成该对象的类。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">10</span> </div><div class="line"><span class="keyword">print</span> age.__class__     <span class="comment">#&lt;type 'int'&gt;</span></div><div class="line">name = <span class="string">"bob"</span> </div><div class="line"><span class="keyword">print</span> name.__class__    <span class="comment">#&lt;type 'str'&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> age.__class__.__class__    <span class="comment">#&lt;type 'type'&gt;  生成类的类，元类type</span></div><div class="line"><span class="keyword">print</span> name.__class__.__class__   <span class="comment">#&lt;type 'type'&gt;</span></div></pre></td></tr></table></figure>
<h2 id="types-vs-objects"><a href="#types-vs-objects" class="headerlink" title="types vs objects"></a>types vs objects</h2><p>生成对象的两种方法：</p>
<ol>
<li>通过已有类继承生成新的类(__bases__);</li>
<li>通过已有类实例化对象(__class__)；</li>
</ol>
<h3 id="重要准则"><a href="#重要准则" class="headerlink" title="重要准则"></a>重要准则</h3><ol>
<li><p>Everything is an object<br>所有东西都是object。</p>
</li>
<li><p>Class is type is class<br>class和type的意义是一样的。</p>
</li>
<li><p>Type or non-type test rule<br>判断一个对象是否是一个类，判断它是否 instance of type。 </p>
</li>
</ol>
<p>Object是一切类(自身除外)的父类，type是生成所有类的类。</p>
<h3 id="对象关系图"><a href="#对象关系图" class="headerlink" title="对象关系图"></a>对象关系图</h3><p><a href="/image/types_map.png">关系图</a></p>
<h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><h3 id="dict"><a href="#dict" class="headerlink" title="__dict__"></a>__dict__</h3><p>用户自定义的属性。 </p>
<p>属性查找顺序(访问obj.attr)：</p>
<ol>
<li>attr是python提供的特殊属性时，返回； </li>
<li>在它的类 __dict__中寻找，如果找到，且是一个data descriptor，则返回 descriptor result；</li>
<li>在该对象的 __dict__中寻找，找到返回；如果该对象也是一个类，则在它的祖先的 __dict__ 中也找。如果找到的是 descriptor， 则返回descriptor result；</li>
<li>在它的类 __dict__中寻找，如果找到，则若是非描述符，则返回；否则应该为non-data descriptor，则返回 descriptor result;</li>
<li>触发异常。</li>
</ol>
<p>总结：python内置属性 =&gt; 类__dict__中的data descriptor =&gt; 对象中的 __dict__ =&gt; 类中的 __dict__ 中的非描述符或non-data descriptor</p>
<p>一些build in类型是没有__dict__的，如list，tuple等，所以用户设置list对象的属性时会报错。</p>
<h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><h3 id="绑定-Bound-非绑定-UnBound"><a href="#绑定-Bound-非绑定-UnBound" class="headerlink" title="绑定(Bound)/非绑定(UnBound)"></a>绑定(Bound)/非绑定(UnBound)</h3><p>类中定义的方法，类名 + . + 方法名是非绑定， 对象 + . + 是绑定。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">pass</span>  </div><div class="line"></div><div class="line">Foo.foo()       <span class="comment">#未绑定  </span></div><div class="line">Foo().foo()     <span class="comment">#绑定，会报错</span></div></pre></td></tr></table></figure></p>
<p>obj.f是绑定方法，cls.__dict__[“f”]是未绑定方法，可以通过 cls.__dict__[“f”].__get__(obj, cls) 来获得。</p>
<h3 id="Descriptor"><a href="#Descriptor" class="headerlink" title="Descriptor"></a>Descriptor</h3><p>可以把带有__get__方法的object放到类的__dict__中，这些object称为descriptor。 </p>
<p>descriptor包含三个方法：</p>
<ol>
<li>__get__<br>obj.attr或cls.attr来调用</li>
<li>__set__  (可选)<br>obj.attr = .. 时调用</li>
<li>__delete__ (可选)<br>删除属性时调用</li>
</ol>
<p>Descriptor只有绑到类上时才会起作用，绑到一个非class的实例上，不会起任何作用。<br>当d为类C的描述符时，实例 c.d 访问到的都是类C中的对象，要想定义使用自己的d，只能 c.__dict__[“d”]的形式</p>
<p>访问描述符时，类改变描述符时会生效，但实例则不会。</p>
<table>
<thead>
<tr>
<th></th>
<th>__get__</th>
<th>__set__</th>
<th>__delete__</th>
</tr>
</thead>
<tbody>
<tr>
<td>实例</td>
<td>调用</td>
<td>调用</td>
<td>调用</td>
</tr>
<tr>
<td>类</td>
<td>调用</td>
<td>不调用</td>
<td>不调用</td>
</tr>
</tbody>
</table>
<p>只包含__get__的描述符称为non-data descriptor。<br>对于data descriptor，对象无法隐藏类的描述符；类修改d = .. 后，则会把描述符替换成其他对象了，并且不会调用__delete__。<br>对于non-data descriptor，对象可以隐藏类的描述符。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Desc</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, cls=None)</span>:</span></div><div class="line">        <span class="keyword">pass</span> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, val)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, obj)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h3 id="类方法-静态方法"><a href="#类方法-静态方法" class="headerlink" title="类方法/静态方法"></a>类方法/静态方法</h3><p>类方法既可以使用类来调用，也可以使用对象来调用。类方法有两个条件</p>
<ol>
<li>使用classmethod描述；</li>
<li>传入的第一个参数是cls；(注意：用self时，只能被实例调用)。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(cls)</span>:</span> <span class="comment">#第一个参数只能是cls</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">Foo.foo() <span class="comment">#ok</span></div><div class="line">Foo().foo() <span class="comment">#ok</span></div></pre></td></tr></table></figure>
<p>静态方法可以被类和对象调用，静态方法用staticmethod修饰器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">    @staticmethod  </span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span> <span class="comment">#不带self和cls</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">Foo.foo() <span class="comment">#ok</span></div><div class="line">Foo().foo() <span class="comment">#ok</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li>python types and objects <a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html" target="_blank" rel="external">1</a>。</li>
<li>python attributes and methods <a href="http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html" target="_blank" rel="external">2</a>。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;p&gt;调用基类的方法时，需要加上基类的类名，并且带上self参数。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;ta
    
    </summary>
    
    
  </entry>
  
</feed>
